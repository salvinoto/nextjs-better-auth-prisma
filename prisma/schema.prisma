generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String       @id
  name                 String
  email                String
  emailVerified        Boolean
  image                String?
  createdAt            DateTime
  updatedAt            DateTime
  twoFactorEnabled     Boolean?
  twoFactorSecret      String?
  twoFactorBackupCodes String?
  Session              Session[]
  Account              Account[]
  Invitation           Invitation[]
  Passkey              Passkey[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  users                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  users        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Organization {
  id         String       @id
  name       String
  slug       String?
  logo       String?
  createdAt  DateTime
  metadata   String?
  Member     Member[]
  Invitation Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  email          String
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  users          User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Passkey {
  id             String    @id
  name           String?
  publicKey      String
  userId         String
  users          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  webauthnUserID String
  counter        Int
  deviceType     String
  backedUp       Boolean
  transports     String?
  createdAt      DateTime?

  @@map("passkey")
}
